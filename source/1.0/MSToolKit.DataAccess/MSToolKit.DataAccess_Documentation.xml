<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MSToolKit.DataAccess</name>
    </assembly>
    <members>
        <member name="T:MSToolKit.DataAccess.Abstraction.IDbContext`2">
            <summary>
            Provides an abstraction for database access.
            </summary>
            <typeparam name="TEntity">The entity, that current dbContext represents.</typeparam>
            <typeparam name="TKey">The primary key for the specified entity.</typeparam>
        </member>
        <member name="M:MSToolKit.DataAccess.Abstraction.IDbContext`2.DeleteAsync(`0)">
            <summary>
            Deletes the given entity from the database.
            </summary>
            <param name="entity">The entity to be deleted.</param>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:MSToolKit.DataAccess.Abstraction.IDbContext`2.GetAsync(`1)">
            <summary>
            Returns a single entity by the given identifier.
            </summary>
            <param name="id">The identifier to search for.</param>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation,
            containing the entity, if exists, that has the given identifier.
            </returns>
        </member>
        <member name="M:MSToolKit.DataAccess.Abstraction.IDbContext`2.GetAsync">
            <summary>
            Gets all entities from the specified database table.
            </summary>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation, 
            containing the retrieved entities.
            </returns>
        </member>
        <member name="M:MSToolKit.DataAccess.Abstraction.IDbContext`2.FilterAsync(System.String,System.Object)">
            <summary>
            Returns a collection of entities, whose mathes the given condition.
            </summary>
            <param name="propertyName">The exact name of the public property(column name)</param>
            <param name="value">The needed value</param>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation,
            containing a collection of entities, that matches the given condition.
            </returns>
        </member>
        <member name="M:MSToolKit.DataAccess.Abstraction.IDbContext`2.FilterAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns a collection of entities, whose mathes the given conditions.
            </summary>
            <param name="matchCollection">
            Dictionary that keeps the property's names as keys and the needed value as value.
            </param>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation,
            containing a collection of entities, that matches the given conditions.
            </returns>
        </member>
        <member name="M:MSToolKit.DataAccess.Abstraction.IDbContext`2.SaveAsync(`0)">
            <summary>
            If the entity exists - updates it, if not - creates it.
            </summary>
            <param name="entity">The entity, that should be created/updated.</param>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="T:MSToolKit.DataAccess.Abstraction.IEntity`1">
            <summary>
            Provides an abstraction for a database entity.
            </summary>
            <typeparam name="TKey">
            The primary key for the given entity.
            </typeparam>
        </member>
        <member name="P:MSToolKit.DataAccess.Abstraction.IEntity`1.Id">
            <summary>
            Gets or sets the primary key for the specified entity.
            </summary>
        </member>
        <member name="T:MSToolKit.DataAccess.Abstraction.IRepository`2">
            <summary>
            Provides an abstraction for generic repository.
            </summary>
            <typeparam name="TEntity">The entity, that current repository represents.</typeparam>
            <typeparam name="TKey">The primary key for the given entity.</typeparam>
        </member>
        <member name="M:MSToolKit.DataAccess.Abstraction.IRepository`2.GetAsync(`1)">
            <summary>
            Gets the specified entity by primary key.
            </summary>
            <param name="id">The entity primary key to search for.</param>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation, 
            containing the entity matching the specified id if it exists.
            </returns>
        </member>
        <member name="M:MSToolKit.DataAccess.Abstraction.IRepository`2.GetAsync">
            <summary>
            Gets all entities from the specified repository.
            </summary>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation, 
            containing the retrieved entities.
            </returns>
        </member>
        <member name="M:MSToolKit.DataAccess.Abstraction.IRepository`2.AddAsync(`0)">
            <summary>
            Adds the specified entity in the backing store, as an asynchronous operation.
            </summary>
            <param name="entity">The entity to be added.</param>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:MSToolKit.DataAccess.Abstraction.IRepository`2.FilterAsync(System.String,System.Object)">
            <summary>
            Returns a collection of entities, whose mathes the given condition.
            </summary>
            <param name="propertyName">The exact name of the public property(column name)</param>
            <param name="value">The needed value</param>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation,
            containing a collection of entities, that matches the given condition.
            </returns>
        </member>
        <member name="M:MSToolKit.DataAccess.Abstraction.IRepository`2.FilterAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns a collection of entities, whose mathes the given conditions.
            </summary>
            <param name="matchCollection">
            Dictionary that keeps the property's names as keys and the needed value as value.
            </param>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation,
            containing a collection of entities, that matches the given conditions.
            </returns>
        </member>
        <member name="M:MSToolKit.DataAccess.Abstraction.IRepository`2.RemoveAsync(`0)">
            <summary>
            Removes the specified entity from the backing store, as an asynchronous operation.
            </summary>
            <param name="entity">The entity to be removed.</param>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:MSToolKit.DataAccess.Abstraction.IRepository`2.UpdateAsync(`0)">
            <summary>
            Updates the specified entity in the backing store, as an asynchronous operation.
            </summary>
            <param name="entity">The entity to be updated.</param>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="T:MSToolKit.DataAccess.Abstraction.Repository`2">
            <summary>
            The base implementation of MSToolKit.DataAccess.Abstraction.IRepository.
            </summary>
            <typeparam name="TEntity">The entity, that current repository represents.</typeparam>
            <typeparam name="TKey">The primary key for the given entity.</typeparam>
        </member>
        <member name="M:MSToolKit.DataAccess.Abstraction.Repository`2.#ctor(MSToolKit.DataAccess.Abstraction.IDbContext{`0,`1})">
            <summary>
            Initializes a new instance of MSToolKit.DataAccess.Abstraction.Repository.
            </summary>
            <param name="dbContext">
            Represents a session with the database and can be used to query and save instances of your entities.
            </param>
        </member>
        <member name="M:MSToolKit.DataAccess.Abstraction.Repository`2.AddAsync(`0)">
            <summary>
            Adds the specified entity in the backing store, as an asynchronous operation.
            </summary>
            <param name="entity">The entity to be added.</param>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:MSToolKit.DataAccess.Abstraction.Repository`2.GetAsync">
            <summary>
            Gets all entities from the specified repository.
            </summary>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation, 
            containing the retrieved entities.
            </returns>
        </member>
        <member name="M:MSToolKit.DataAccess.Abstraction.Repository`2.GetAsync(`1)">
            <summary>
            Gets the specified entity by primary key.
            </summary>
            <param name="id">The entity primary key to search for.</param>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation, 
            containing the entity matching the specified id if it exists.
            </returns>
        </member>
        <member name="M:MSToolKit.DataAccess.Abstraction.Repository`2.FilterAsync(System.String,System.Object)">
            <summary>
            Returns a collection of entities, whose mathes the given condition.
            </summary>
            <param name="propertyName">The exact name of the public property(column name)</param>
            <param name="value">The needed value</param>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation,
            containing a collection of entities, that matches the given condition.
            </returns>
        </member>
        <member name="M:MSToolKit.DataAccess.Abstraction.Repository`2.FilterAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns a collection of entities, whose mathes the given conditions.
            </summary>
            <param name="matchCollection">
            Dictionary that keeps the property's names as keys and the needed value as value.
            </param>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation,
            containing a collection of entities, that matches the given conditions.
            </returns>
        </member>
        <member name="M:MSToolKit.DataAccess.Abstraction.Repository`2.RemoveAsync(`0)">
            <summary>
            Removes the specified entity from the backing store, as an asynchronous operation.
            </summary>
            <param name="entity">The entity to be removed.</param>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:MSToolKit.DataAccess.Abstraction.Repository`2.UpdateAsync(`0)">
            <summary>
            Updates the specified entity in the backing store, as an asynchronous operation.
            </summary>
            <param name="entity">The entity to be updated.</param>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation.
            </returns>
        </member>
    </members>
</doc>
