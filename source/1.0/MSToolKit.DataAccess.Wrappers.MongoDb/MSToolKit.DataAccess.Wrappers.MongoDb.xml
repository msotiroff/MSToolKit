<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MSToolKit.DataAccess.Wrappers.MongoDb</name>
    </assembly>
    <members>
        <member name="T:MSToolKit.DataAccess.Wrappers.MongoDb.Abstraction.IMongoDbWrapper`2">
            <summary>
            Provides an abstraction for MongoDb data access.
            </summary>
            <typeparam name="TEntity">The type encapsulating a database entity.</typeparam>
            <typeparam name="TKey">The type of the primary key for the specified entity.</typeparam>
        </member>
        <member name="M:MSToolKit.DataAccess.Wrappers.MongoDb.DependencyInjection.ServiceCollectionExtension.AddMongoDbWrapper``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            Adds a default instance of MSToolKit.Wrappers.MongoDb.Abstraction.IMongoDbWrapper
            for a specified entity with specified primary key.
            </summary>
            <typeparam name="TEntity">The type encapsulating the entity.</typeparam>
            <typeparam name="TKey">The primary key's type for the given entity.</typeparam>
            <param name="services">The service collection, that will service provider be built from.</param>
            <param name="tableName">The name of the table, that contains the entities of the given type.</param>
            <returns>
            The same instane of Microsoft.Extensions.DependencyInjection.IServiceCollection with filled MongoDbWrapper services.
            </returns>
        </member>
        <member name="M:MSToolKit.DataAccess.Wrappers.MongoDb.DependencyInjection.ServiceCollectionExtension.AddMongoDatabase(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MSToolKit.DataAccess.Wrappers.MongoDb.MongoDbOptions})">
            <summary>
            Adds a default instance for MongoDB.Driver.IMongoDatabase with specified options.
            </summary>
            <param name="services">The service collection, that will service provider be built from.</param>
            <param name="mongoDbOptions">
            MSToolKit.Wrappers.MongoDb.MongoDbOptions, that configure the IMongoDatabase instance.
            </param>
            <exception cref="T:System.ArgumentException">
            System.ArgumentException will be thrown, if some of the required options are not specified or invalid.
            </exception>
            <returns>
            The same instane of Microsoft.Extensions.DependencyInjection.IServiceCollection with filled mongo db services.
            </returns>
        </member>
        <member name="T:MSToolKit.DataAccess.Wrappers.MongoDb.MongoDbOptions">
            <summary>
            Specifies options for MongoDb requirements.
            </summary>
        </member>
        <member name="P:MSToolKit.DataAccess.Wrappers.MongoDb.MongoDbOptions.DatabaseName">
            <summary>
            Gets or sets the name of the database, that should be used.
            </summary>
        </member>
        <member name="P:MSToolKit.DataAccess.Wrappers.MongoDb.MongoDbOptions.ConnectionString">
            <summary>
            Gets or sets the connection string, that should be used.
            </summary>
        </member>
        <member name="T:MSToolKit.DataAccess.Wrappers.MongoDb.MongoDbWrapper`2">
            <summary>
            Provides a default implementation for MSToolKit.Wrappers.MongoDb.Abstraction.IMongoDbWrapper.
            </summary>
            <typeparam name="TEntity">The type encapsulating a database entity.</typeparam>
            <typeparam name="TKey">The type of the primary key for the specified entity.</typeparam>
        </member>
        <member name="M:MSToolKit.DataAccess.Wrappers.MongoDb.MongoDbWrapper`2.#ctor(MongoDB.Driver.IMongoDatabase,System.String)">
            <summary>
            Initialize a new instance for MSToolKit.Wrappers.MongoDb.MongoDbWrapper.
            </summary>
            <param name="dataBase">
            An inplementation for MongoDB.Driver.IMongoDatabase.
            </param>
            <param name="tableName">
            The name of the table, that contains database entities for the current type of entities.
            </param>
        </member>
        <member name="M:MSToolKit.DataAccess.Wrappers.MongoDb.MongoDbWrapper`2.GetAsync(`1)">
            <summary>
            Gets an entity by the given identifier as an asynchronous operation.
            </summary>
            <param name="id">The entity identifier to search for.</param>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation, 
            containing the entity matching the specified identifier, if it exists.
            </returns>
        </member>
        <member name="M:MSToolKit.DataAccess.Wrappers.MongoDb.MongoDbWrapper`2.DeleteAsync(`0)">
            <summary>
            Deletes the given entity from the database as an asynchronous operation.
            </summary>
            <param name="entity">The entity to be deleted.</param>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:MSToolKit.DataAccess.Wrappers.MongoDb.MongoDbWrapper`2.FilterAsync(System.String,System.Object)">
            <summary>
            Returns a collection of entities, whose mathes the given condition.
            </summary>
            <param name="propertyName">The exact name of the public property(column name)</param>
            <param name="value">The needed value</param>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation,
            containing a collection of entities, that matches the given condition.
            </returns>
        </member>
        <member name="M:MSToolKit.DataAccess.Wrappers.MongoDb.MongoDbWrapper`2.FilterAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns a collection of entities, whose mathes the given conditions.
            </summary>
            <param name="matchCollection">
            Dictionary that keeps the property's names as keys and the needed value as value.
            </param>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation,
            containing a collection of entities, that matches the given conditions.
            </returns>
        </member>
        <member name="M:MSToolKit.DataAccess.Wrappers.MongoDb.MongoDbWrapper`2.SaveAsync(`0)">
            <summary>
            Save the given entity to the database as an asynchronous operation. 
            If the given entity already exists, the operation will update it.
            </summary>
            <param name="entity">The entity, that should be stored.</param>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:MSToolKit.DataAccess.Wrappers.MongoDb.MongoDbWrapper`2.GetAsync">
            <summary>
            Gets all entities from the specified database table.
            </summary>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation, 
            containing the retrieved entities.
            </returns>
        </member>
    </members>
</doc>
