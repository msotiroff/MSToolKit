<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MSToolKit.IO</name>
    </assembly>
    <members>
        <member name="T:MSToolKit.IO.Abstraction.IFileProcessor">
            <summary>
            Provides an abstraction for processing files.
            </summary>
        </member>
        <member name="M:MSToolKit.IO.Abstraction.IFileProcessor.GetUniqueFileName(System.String)">
            <summary>
            Generate an unique file name.
            </summary>
            <param name="fileName">
            Current file name.
            </param>
            <returns>
            The unique file name.
            </returns>
        </member>
        <member name="M:MSToolKit.IO.Abstraction.IFileProcessor.WriteToFileAsync(System.Collections.Generic.IEnumerable{System.Byte},System.String,System.String,System.String)">
            <summary>
            Creates a file with specified name and extension, and writes it to a specified folder in the file system.
            </summary>
            <param name="fileBytes">The content (in bytes) of the file, that should be created.</param>
            <param name="fileFolder">The folder where the created file should be stored.</param>
            <param name="fileName">The name for the file, that should be creted.</param>
            <param name="fileExtension">The extension for the file, that should be creted.</param>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation,
            containing the full path of the created file as string.
            </returns>
        </member>
        <member name="M:MSToolKit.IO.Abstraction.IFileProcessor.WriteToFileAsync(System.Collections.Generic.IEnumerable{System.Byte},System.String)">
            <summary>
            Creates a file and writes it to the file system.
            </summary>
            <param name="fileBytes">The content (in bytes) of the file, that should be created.</param>
            <param name="fileFullPath">The full path (directory, file name, extension) of the file, that should be stored.</param>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation,
            containing the full path of the created file as string.
            </returns>
        </member>
        <member name="M:MSToolKit.IO.Abstraction.IFileProcessor.Open(System.String,System.String)">
            <summary>
            Finds and opens a file in a specified directory.
            </summary>
            <param name="fileFolder">The directory, that contains the given file.</param>
            <param name="fileName">The file name (incl. extension), that should be opened.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">
            A System.ComponentModel.Win32Exception will be thrown if the file does not exists.
            </exception>
        </member>
        <member name="M:MSToolKit.IO.Abstraction.IFileProcessor.Open(System.String)">
            <summary>
            Finds and opens a file with a specified path.
            </summary>
            <param name="fileFullPath">The full path of the file, that should be opened. For example: C:\examples\myFile.txt</param>
            <exception cref="T:System.ComponentModel.Win32Exception">
            A System.ComponentModel.Win32Exception will be thrown if the file does not exists.
            </exception>
        </member>
        <member name="M:MSToolKit.IO.DependencyInjection.ServiceCollectionExtensions.AddFileServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds a default instance for MSToolKit.IO.Abstraction.IFileProcessor to the service provider.
            </summary>
            <param name="services">The service collection, that will service provider be built from.</param>
            <returns>
            The same instane of Microsoft.Extensions.DependencyInjection.IServiceCollection with filled file services.
            </returns>
        </member>
        <member name="M:MSToolKit.IO.FileProcessor.GetUniqueFileName(System.String)">
            <summary>
            Generate an unique file name.
            </summary>
            <param name="fileName">
            Current file name.
            </param>
            <returns>
            The unique file name.
            </returns>
        </member>
        <member name="M:MSToolKit.IO.FileProcessor.Open(System.String,System.String)">
            <summary>
            Finds and opens a file in a specified directory.
            </summary>
            <param name="fileFolder">The directory, that contains the given file.</param>
            <param name="fileName">The file name (incl. extension), that should be opened.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">
            A System.ComponentModel.Win32Exception will be thrown if the file does not exists.
            </exception>
        </member>
        <member name="M:MSToolKit.IO.FileProcessor.Open(System.String)">
            <summary>
            Finds and opens a file with a specified path.
            </summary>
            <param name="fileFullPath">The full path of the file, that should be opened. For example: C:\examples\myFile.txt</param>
            <exception cref="T:System.ComponentModel.Win32Exception">
            A System.ComponentModel.Win32Exception will be thrown if the file does not exists.
            </exception>
        </member>
        <member name="M:MSToolKit.IO.FileProcessor.WriteToFileAsync(System.Collections.Generic.IEnumerable{System.Byte},System.String,System.String,System.String)">
            <summary>
            Creates a file with specified name and extension, and writes it to a specified folder in the file system. 
            If a file with the same name already exists in this directory 
            appends an index to the end of file name. For example C:\examples\myFile(1).txt, C:\examples\myFile(2).txt, ect.
            </summary>
            <param name="fileBytes">The content (in bytes) of the file, that should be created.</param>
            <param name="fileFolder">The folder where the created file should be stored.</param>
            <param name="fileName">The name for the file, that should be creted.</param>
            <param name="fileExtension">The extension for the file, that should be creted.</param>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation,
            containing the full path of the created file as string.
            </returns>
        </member>
        <member name="M:MSToolKit.IO.FileProcessor.WriteToFileAsync(System.Collections.Generic.IEnumerable{System.Byte},System.String)">
            <summary>
            Creates a file and writes it to the file system. 
            If a file with the same full name already exists
            appends an index to the end of file name. For example C:\examples\myFile(1).txt, C:\examples\myFile(2).txt, ect.
            </summary>
            <param name="fileBytes">The content (in bytes) of the file, that should be created.</param>
            <param name="fileFullPath">The full path (directory, file name, extension) of the file, that should be stored.</param>
            <returns>
            The System.Threading.Tasks.Task that represents the asynchronous operation,
            containing the full path of the created file as string.
            </returns>
        </member>
    </members>
</doc>
